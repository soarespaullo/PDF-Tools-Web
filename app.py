from flask import Flask, render_template, request, send_file, redirect, flash, url_for
from werkzeug.utils import secure_filename
import os
import zipfile
import PyPDF2
import subprocess
import pytesseract
import pdfplumber
import pandas as pd
from pptx import Presentation
from pptx.util import Inches
from PyPDF2.errors import FileNotDecryptedError, PdfReadError
from weasyprint import HTML
from datetime import datetime
from PIL import Image, UnidentifiedImageError
from fpdf import FPDF
from pdf2image import convert_from_path
from pdf2docx import Converter
from PyPDF2 import PdfReader, PdfWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from io import BytesIO
from bs4 import BeautifulSoup
from bleach import clean

# Cria a aplica√ß√£o Flask
app = Flask(__name__)

# Define uma chave secreta para a aplica√ß√£o
# Ela √© usada para manter dados seguros nas sess√µes (por exemplo, cookies)
app.secret_key = 'supersecretkey'

# Define o caminho absoluto do diret√≥rio onde o arquivo atual (geralmente app.py) est√° localizado
BASE_DIR = os.path.abspath(os.path.dirname(__file__))

# Cria o caminho completo para a pasta 'uploads', usada para armazenar arquivos enviados temporariamente
RESULT_FOLDER = os.path.join(BASE_DIR, 'results')

# Cria o caminho completo para a pasta 'results', usada para armazenar arquivos gerados pelo app
UPLOAD_FOLDER = os.path.join(BASE_DIR, 'uploads')

# Garante que a pasta 'uploads' exista; se n√£o existir, ser√° criada
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Garante que a pasta 'results' exista; se n√£o existir, ser√° criada
os.makedirs(RESULT_FOLDER, exist_ok=True)

# --- ROTA: Exibir a P√°gina Inicial com os Formul√°rios ---
@app.route('/')
def index():
    return render_template('index.html')

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: Juntar PDFs ---
@app.route('/juntar', methods=['POST'])
def juntar_pdf():
    # Obt√©m todos os arquivos enviados no campo "pdfs" (com multiple no HTML)
    arquivos = request.files.getlist("pdfs")

    # Cria o objeto respons√°vel por juntar os PDFs
    merger = PyPDF2.PdfMerger()

    # Contador de PDFs v√°lidos
    pdfs_validos = 0

    # Lista para armazenar os nomes dos arquivos inv√°lidos
    arquivos_invalidos = []

    # Percorre cada arquivo enviado
    for file in arquivos:
        # Verifica se o arquivo existe e tem a extens√£o .pdf
        if file and file.filename.lower().endswith('.pdf'):
            # Garante um nome de arquivo seguro
            filename = secure_filename(file.filename)
            # Define o caminho tempor√°rio onde o arquivo ser√° salvo
            path = os.path.join(UPLOAD_FOLDER, filename)
            # Salva o arquivo no servidor temporariamente
            file.save(path)

            try:
                # Tenta abrir o arquivo com PyPDF2 para validar se √© um PDF de verdade
                with open(path, 'rb') as f:
                    reader = PyPDF2.PdfReader(f)
                    _ = len(reader.pages)  # Verifica se possui p√°ginas

                # Se passou pela valida√ß√£o, adiciona ao merger
                merger.append(path)
                pdfs_validos += 1

            except Exception:
                # Remove o arquivo corrompido ou inv√°lido
                os.remove(path)
                # Adiciona √† lista de arquivos inv√°lidos para exibir mensagem depois
                arquivos_invalidos.append(filename)

        else:
            # Arquivos que n√£o t√™m extens√£o .pdf
            arquivos_invalidos.append(file.filename)

    # Exibe uma mensagem flash para cada arquivo inv√°lido detectado
    for nome in arquivos_invalidos:
        flash(f"‚ùå O arquivo '{nome}' n√£o √© um PDF v√°lido e foi ignorado.")

    # Se menos de dois arquivos v√°lidos foram enviados,
    # e n√£o houve arquivos inv√°lidos (j√° tratados com mensagens),
    # ent√£o mostra mensagem gen√©rica de erro
    if pdfs_validos < 2:
        if not arquivos_invalidos:
            flash("‚ö†Ô∏è Envie pelo menos dois arquivos PDF v√°lidos para juntar.")
        return redirect(request.referrer or url_for('index'))

    # Cria um nome √∫nico para o PDF de sa√≠da com base na data/hora
    data_formatada = datetime.now().strftime('%d-%m-%Y_%H-%M-%S')
    output_filename = f"juntado_{data_formatada}.pdf"
    output_path = os.path.join(RESULT_FOLDER, output_filename)

    # Escreve o PDF final juntado
    merger.write(output_path)
    merger.close()

    # Exibe mensagem de sucesso
    flash("‚úÖ PDFs juntados com sucesso!")

    # Redireciona para a p√°gina que mostrar√° o link para baixar
    return redirect(url_for('download_page', filename=output_filename))


# Rota que exibe a p√°gina HTML com o link de download do arquivo gerado
@app.route('/download/<filename>')
def download_page(filename):
    # Renderiza o template 'download.html' passando o nome do arquivo como vari√°vel
    return render_template('download.html', filename=filename)


# Rota que permite baixar diretamente o arquivo PDF gerado
@app.route('/baixar/<filename>')
def baixar_pdf(filename):
    # Monta o caminho completo at√© o arquivo no servidor
    path = os.path.join(RESULT_FOLDER, filename)
    # Envia o arquivo como anexo (for√ßa o download no navegador)
    return send_file(path, as_attachment=True)

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: Dividir PDF ---
@app.route('/dividir', methods=['POST'])
def dividir_pdf():
    # Verifica se o arquivo foi enviado no formul√°rio
    if 'pdf' not in request.files:
        flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
        return redirect(request.referrer or url_for('index'))

    file = request.files['pdf']

    # Verifica se o nome do arquivo est√° vazio
    if file.filename == '':
        flash("‚ö†Ô∏è Nenhum arquivo selecionado.")
        return redirect(request.referrer or url_for('index'))

    # Verifica se a extens√£o √© .pdf
    if not file.filename.lower().endswith('.pdf'):
        flash(f"‚ùå O arquivo '{file.filename}' n√£o possui extens√£o .pdf.")
        return redirect(request.referrer or url_for('index'))

    # Garante um nome seguro e salva o arquivo
    filename = secure_filename(file.filename)
    path = os.path.join(UPLOAD_FOLDER, filename)
    file.save(path)

    try:
        with open(path, 'rb') as f:
            reader = PyPDF2.PdfReader(f)

            # Verifica se est√° criptografado
            if reader.is_encrypted:
                os.remove(path)
                flash("üîí O arquivo PDF est√° protegido por senha e n√£o pode ser processado.")
                return redirect(request.referrer or url_for('index'))

            # Verifica se h√° p√°ginas no PDF
            if len(reader.pages) == 0:
                os.remove(path)
                flash("‚ö†Ô∏è O PDF est√° vazio.")
                return redirect(request.referrer or url_for('index'))

            # Define nome e caminho do ZIP final
            zip_filename = f"{os.path.splitext(filename)[0]}_paginas.zip"
            zip_path = os.path.join(RESULT_FOLDER, zip_filename)
            paginas_geradas = []

            # Cria o ZIP com os PDFs de cada p√°gina
            with zipfile.ZipFile(zip_path, 'w') as zipf:
                for i, page in enumerate(reader.pages):
                    writer = PyPDF2.PdfWriter()
                    writer.add_page(page)

                    output_filename = f"{os.path.splitext(filename)[0]}_pagina_{i+1}.pdf"
                    output_path = os.path.join(RESULT_FOLDER, output_filename)

                    with open(output_path, 'wb') as out:
                        writer.write(out)

                    zipf.write(output_path, arcname=output_filename)
                    paginas_geradas.append(output_filename)

    except PyPDF2.errors.PdfReadError:
        os.remove(path)
        flash(f"‚ùå O arquivo '{file.filename}' n√£o √© um PDF v√°lido ou est√° corrompido.")
        return redirect(request.referrer or url_for('index'))

    except Exception:
        os.remove(path)
        flash(f"‚ùå Ocorreu um erro ao processar o arquivo '{file.filename}'. Certifique-se de que seja um PDF v√°lido.")
        return redirect(request.referrer or url_for('index'))

    # Mensagem de sucesso
    flash("‚úÖ PDF dividido com sucesso!")

    # Redireciona para p√°gina com links de download
    return redirect(url_for('download_paginas',
                            arquivos=','.join(paginas_geradas),
                            zipfile=zip_filename))

# Rota para exibir a p√°gina de download das p√°ginas geradas
@app.route('/paginas-divididas')
def download_paginas():
    # Recupera os nomes dos arquivos individuais e do ZIP dos par√¢metros da URL
    arquivos = request.args.get('arquivos', '').split(',')
    zipfile_name = request.args.get('zipfile', '')

    # Renderiza o template com os nomes dos arquivos
    return render_template('paginas_divididas.html', arquivos=arquivos, zipfile=zipfile_name)

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: Comprimir PDF ---
@app.route('/comprimir', methods=['POST'])
def comprimir_pdf():
    # Verifica se o arquivo foi enviado no formul√°rio
    if 'pdf' not in request.files:
        flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
        return redirect(request.referrer or url_for('index'))

    file = request.files['pdf']

    # Verifica se o nome do arquivo est√° vazio
    if file.filename == '':
        flash("‚ö†Ô∏è Nenhum arquivo selecionado.")
        return redirect(request.referrer or url_for('index'))

    # Verifica se a extens√£o do arquivo √© .pdf (n√£o garante que √© PDF real, apenas a extens√£o)
    if not file.filename.lower().endswith('.pdf'):
        flash(f"‚ùå O arquivo '{file.filename}' n√£o possui extens√£o .pdf.")
        return redirect(request.referrer or url_for('index'))

    # Garante um nome seguro e define o caminho onde o arquivo ser√° salvo
    filename = secure_filename(file.filename)
    input_path = os.path.join(UPLOAD_FOLDER, filename)

    # Salva o arquivo enviado no diret√≥rio de uploads
    file.save(input_path)

    # Tenta validar se o arquivo √© realmente um PDF e se n√£o est√° criptografado
    try:
        with open(input_path, 'rb') as f:
            reader = PyPDF2.PdfReader(f)

            # Se o PDF estiver criptografado, exibe mensagem apropriada
            if reader.is_encrypted:
                raise Exception("üîí O arquivo PDF est√° protegido por senha.")

            # Se o PDF n√£o tiver p√°ginas, tamb√©m √© considerado inv√°lido
            if len(reader.pages) == 0:
                raise Exception("O PDF est√° vazio.")

    except Exception as e:
        # Remove o arquivo inv√°lido
        os.remove(input_path)

        # Exibe mensagem apropriada dependendo do tipo de erro detectado
        if "protegido" in str(e).lower():
            flash("üîí O arquivo PDF est√° protegido por senha.")
        else:
            flash("‚ùå O arquivo enviado est√° corrompido ou n√£o √© um PDF v√°lido.")
        return redirect(request.referrer or url_for('index'))

    # Define o nome final do arquivo comprimido
    compressed_filename = f"comprimido_{filename}"
    output_path = os.path.join(RESULT_FOLDER, compressed_filename)

    # Comando Ghostscript para comprimir o PDF
    gs_command = [
        "gs",                         # Chama o Ghostscript
        "-sDEVICE=pdfwrite",          # Define o tipo de sa√≠da como PDF
        "-dCompatibilityLevel=1.4",   # Define a compatibilidade do PDF
        "-dPDFSETTINGS=/screen",      # N√≠vel de compress√£o: screen = alta compress√£o, baixa qualidade
        "-dNOPAUSE",                  # Evita pausas entre p√°ginas
        "-dQUIET",                    # Suprime mensagens de log no terminal
        "-dBATCH",                    # Finaliza o processo automaticamente
        f"-sOutputFile={output_path}",# Arquivo de sa√≠da comprimido
        input_path                    # Arquivo original (de entrada)
    ]

    try:
        # Executa o comando do Ghostscript para comprimir o PDF
        subprocess.run(gs_command, check=True)

        # Se sucesso, exibe mensagem positiva ao usu√°rio
        flash("‚úÖ PDF comprimido com sucesso!")

        # Redireciona para a p√°gina com o link de download do arquivo comprimido
        return render_template('comprimido.html', filename=compressed_filename)

    except subprocess.CalledProcessError:
        # Caso o Ghostscript n√£o esteja instalado ou ocorra erro na execu√ß√£o
        flash("‚ùå Erro ao comprimir o PDF. Verifique se o Ghostscript est√° instalado.")
        return redirect(request.referrer or url_for('index'))

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: Proteger PDF ---
@app.route('/proteger', methods=['POST'])
def proteger_pdf():
    # Verifica se o arquivo foi enviado no formul√°rio
    if 'pdf' not in request.files:
        flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
        return redirect(request.referrer or url_for('index'))

    file = request.files['pdf']
    senha = request.form.get('senha', '')

    # Verifica se o nome do arquivo est√° vazio
    if file.filename == '':
        flash("‚ö†Ô∏è Nenhum arquivo selecionado.")
        return redirect(request.referrer or url_for('index'))

    # Verifica se a extens√£o √© .pdf
    if not file.filename.lower().endswith('.pdf'):
        flash(f"‚ùå O arquivo '{file.filename}' n√£o possui extens√£o .pdf.")
        return redirect(request.referrer or url_for('index'))

    # Verifica se a senha foi fornecida
    if not senha.strip():
        flash("‚ö†Ô∏è Voc√™ precisa fornecer uma senha para proteger o PDF.")
        return redirect(request.referrer or url_for('index'))

    # Define nomes e caminhos de entrada/sa√≠da
    filename = secure_filename(file.filename)
    input_path = os.path.join(UPLOAD_FOLDER, filename)
    output_filename = f"protegido_{filename}"
    output_path = os.path.join(RESULT_FOLDER, output_filename)

    # Salva o arquivo no diret√≥rio de uploads tempor√°rios
    file.save(input_path)

    try:
        # Tenta abrir e validar se √© realmente um PDF
        with open(input_path, 'rb') as f:
            reader = PyPDF2.PdfReader(f)

            # Verifica se o PDF est√° criptografado
            if reader.is_encrypted:
                flash("‚ö†Ô∏è Este PDF j√° est√° protegido por senha.")
                return redirect(request.referrer or url_for('index'))

            # Verifica se o PDF possui p√°ginas
            if len(reader.pages) == 0:
                raise Exception("O PDF est√° vazio.")

            # Cria novo writer e adiciona as p√°ginas
            writer = PyPDF2.PdfWriter()
            for page in reader.pages:
                writer.add_page(page)

            # Aplica a senha ao PDF de sa√≠da
            writer.encrypt(senha)

            # Salva o novo PDF protegido
            with open(output_path, 'wb') as out:
                writer.write(out)

            # Mensagem de sucesso
            flash("üîí PDF protegido com sucesso!")
            return render_template('protegido.html', filename=output_filename)

    except Exception as e:
        # Remove o arquivo inv√°lido
        os.remove(input_path)

        # Personaliza a mensagem de erro de acordo com o tipo
        if "protegido" in str(e).lower():
            flash("‚ö†Ô∏è Este PDF j√° est√° protegido por senha.")
        elif "eof" in str(e).lower() or "startxref" in str(e).lower():
            flash("‚ùå O arquivo enviado n√£o √© um PDF v√°lido ou est√° corrompido.")
        else:
            flash("‚ùå Ocorreu um erro ao processar o PDF. Verifique se √© um arquivo v√°lido.")
        return redirect(request.referrer or url_for('index'))

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: Desbloquear PDF ---
@app.route('/desbloquear', methods=['POST'])
def desbloquear_pdf():
    # Verifica se o arquivo foi enviado no formul√°rio
    if 'pdf' not in request.files:
        flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
        return redirect(request.referrer or url_for('index'))

    file = request.files['pdf']
    senha = request.form.get('senha', '')

    # Verifica se o nome do arquivo est√° vazio
    if file.filename == '':
        flash("‚ö†Ô∏è Nenhum arquivo selecionado.")
        return redirect(request.referrer or url_for('index'))

    # Verifica se a extens√£o √© .pdf
    if not file.filename.lower().endswith('.pdf'):
        flash(f"‚ùå O arquivo '{file.filename}' n√£o possui extens√£o .pdf.")
        return redirect(request.referrer or url_for('index'))

    # Verifica se a senha foi fornecida
    if not senha.strip():
        flash("‚ö†Ô∏è Voc√™ precisa fornecer a senha para desbloquear o PDF.")
        return redirect(request.referrer or url_for('index'))

    # Define nomes e caminhos de entrada/sa√≠da
    filename = secure_filename(file.filename)
    input_path = os.path.join(UPLOAD_FOLDER, filename)
    output_filename = f"desbloqueado_{filename}"
    output_path = os.path.join(RESULT_FOLDER, output_filename)

    # Salva o arquivo temporariamente
    file.save(input_path)

    try:
        # Cria o leitor do PDF
        reader = PyPDF2.PdfReader(input_path)

        # Verifica se o PDF est√° criptografado
        if reader.is_encrypted:
            try:
                # Tenta desbloquear com a senha fornecida
                if not reader.decrypt(senha):
                    flash("‚ùå Senha incorreta ou falha ao desbloquear o PDF.")
                    return redirect(request.referrer or url_for('index'))

                # For√ßa acesso a uma p√°gina para verificar se desbloqueou mesmo
                _ = reader.pages[0]

            except PyPDF2.errors.FileNotDecryptedError:
                flash("‚ùå Senha incorreta. O PDF n√£o p√¥de ser desbloqueado.")
                return redirect(request.referrer or url_for('index'))

            except Exception as e:
                flash("‚ùå Erro ao processar o PDF. Verifique se o arquivo est√° corrompido ou √© um PDF v√°lido.")
                return redirect(request.referrer or url_for('index'))

            # Se o desbloqueio foi bem-sucedido, cria novo PDF sem senha
            writer = PyPDF2.PdfWriter()
            for page in reader.pages:
                writer.add_page(page)

            # Salva o novo PDF desbloqueado
            with open(output_path, 'wb') as f:
                writer.write(f)

            flash("‚úÖ PDF desbloqueado com sucesso!")
            return render_template('desbloqueado.html', filename=output_filename)

        else:
            # O PDF j√° est√° desbloqueado
            flash("‚ÑπÔ∏è Este PDF n√£o est√° protegido por senha.")
            return redirect(request.referrer or url_for('index'))

    except Exception as e:
        # Remove o arquivo tempor√°rio se falhar
        os.remove(input_path)
        if "eof" in str(e).lower() or "startxref" in str(e).lower():
            flash("‚ùå O arquivo enviado n√£o √© um PDF v√°lido ou est√° corrompido.")
        else:
            flash("‚ùå Ocorreu um erro ao processar o PDF.")
        return redirect(request.referrer or url_for('index'))
        
# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: HTML para PDF ---
@app.route('/html_para_pdf', methods=['POST'])
def html_para_pdf():
    try:
        html_content = request.form.get('html', '')

        if not html_content.strip():
            flash("‚ö†Ô∏è O campo de conte√∫do HTML est√° vazio.")
            return redirect(request.referrer or url_for('index'))

        # Sanitiza o conte√∫do HTML
        safe_html = clean(
            html_content,
            tags=[
                'p', 'br', 'b', 'i', 'u', 'strong', 'em', 'h1', 'h2', 'h3', 'h4',
                'ul', 'ol', 'li', 'table', 'thead', 'tbody', 'tr', 'td', 'th',
                'a', 'img', 'div', 'span', 'hr'
            ],
            attributes={
                'a': ['href', 'title'],
                'img': ['src', 'alt', 'width', 'height'],
                '*': ['style']
            },
            protocols=['http', 'https', 'mailto'],
            strip=True
        )

        # Valida se h√° pelo menos uma tag HTML ap√≥s sanitiza√ß√£o
        soup = BeautifulSoup(safe_html, 'html.parser')
        if not soup.find():  # Nenhuma tag HTML encontrada
            flash("‚ö†Ô∏è O conte√∫do enviado n√£o parece ser um HTML v√°lido.")
            return redirect(request.referrer or url_for('index'))

        # Define nome e caminho do arquivo PDF
        timestamp = datetime.now().strftime("%d-%m-%Y_%H-%M-%S")
        output_filename = f"html_convertido_{timestamp}.pdf"
        output_path = os.path.join(RESULT_FOLDER, output_filename)

        # Gera o PDF com WeasyPrint
        HTML(string=safe_html).write_pdf(output_path)

        flash("‚úÖ HTML convertido para PDF com sucesso!")
        return render_template('download_unico.html', filename=output_filename)

    except Exception:
        flash("‚ùå Ocorreu um erro ao converter o HTML. Verifique se o conte√∫do est√° bem formatado.")
        return redirect(request.referrer or url_for('index'))

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: PDF para JPG ---
@app.route('/pdf_para_jpg', methods=['POST'])
def pdf_para_jpg():
    try:
        # Verifica se o arquivo foi enviado via formul√°rio
        if 'pdf' not in request.files:
            flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
            return redirect(request.referrer or url_for('index'))

        file = request.files['pdf']

        # Verifica se o usu√°rio selecionou algum arquivo
        if file.filename == '':
            flash("‚ö†Ô∏è Nenhum arquivo selecionado.")
            return redirect(request.referrer or url_for('index'))

        # Verifica se o arquivo tem extens√£o .pdf
        if not file.filename.lower().endswith('.pdf'):
            flash(f"‚ùå O arquivo '{file.filename}' n√£o possui extens√£o .pdf.")
            return redirect(request.referrer or url_for('index'))

        # Gera timestamp no formato dd-mm-aaaa_HH-MM-SS
        timestamp = datetime.now().strftime("%d-%m-%Y_%H-%M-%S")
        safe_name = secure_filename(file.filename)
        filename = f"{timestamp}_{safe_name}"

        input_path = os.path.join(UPLOAD_FOLDER, filename)
        file.save(input_path)

        # Verifica se o PDF est√° protegido por senha
        try:
            with open(input_path, 'rb') as f:
                reader = PdfReader(f)
                if reader.is_encrypted:
                    os.remove(input_path)
                    flash("üîí O arquivo PDF est√° protegido por senha.")
                    return redirect(request.referrer or url_for('index'))
        except PdfReadError as e:
            # Trata erro ao ler o PDF (ex: PDF corrompido ou truncado)
            os.remove(input_path)
            if "EOF marker not found" in str(e):
                flash("‚ùå O arquivo PDF parece estar incompleto ou corrompido.")
            else:
                flash(f"‚ùå Erro ao ler o PDF: {str(e)}")
            return redirect(request.referrer or url_for('index'))

        # Converte cada p√°gina do PDF em uma imagem JPG
        imagens = convert_from_path(input_path)
        arquivos_gerados = []

        for i, img in enumerate(imagens):
            output_filename = f"{filename.rsplit('.', 1)[0]}_pagina_{i+1}.jpg"
            output_path = os.path.join(RESULT_FOLDER, output_filename)
            img.save(output_path, 'JPEG')
            arquivos_gerados.append(output_filename)

        # Mensagem de sucesso + renderiza p√°gina com os arquivos gerados
        flash("‚úÖ Convers√£o para JPG conclu√≠da!")
        return render_template('paginas_convertidas.html', arquivos=arquivos_gerados)

    except Exception as e:
        # Remove o arquivo tempor√°rio em caso de erro
        if 'input_path' in locals() and os.path.exists(input_path):
            os.remove(input_path)
        # Exibe erro gen√©rico para falhas inesperadas
        flash(f"‚ùå Erro ao converter PDF para JPG: {str(e)}")
        return redirect(request.referrer or url_for('index'))

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: JPG para PDF ---
@app.route('/jpg_para_pdf', methods=['POST'])
def jpg_para_pdf():
    try:
        imagens = request.files.getlist("imagens")

        # Verifica se alguma imagem foi selecionada
        if not imagens or imagens[0].filename == '':
            flash("‚ùå Nenhuma imagem selecionada para convers√£o.")
            return redirect('/')

        pdf = FPDF()
        pdf.set_auto_page_break(0)  # Evita quebra autom√°tica de p√°gina

        for img in imagens:
            filename = secure_filename(img.filename)

            # Antes de salvar, valida se o arquivo √© realmente uma imagem v√°lida
            try:
                # Tenta abrir o arquivo com PIL para validar
                image = Image.open(img)
                image.verify()  # Verifica se a imagem est√° √≠ntegra e √© v√°lida
                img.seek(0)     # Reset para in√≠cio do arquivo ap√≥s verify (importante)
            except (UnidentifiedImageError, IOError):
                flash(f"‚ùå O arquivo '{filename}' n√£o √© uma imagem v√°lida.")
                return redirect('/')

            # Salva o arquivo validado na pasta tempor√°ria
            path = os.path.join(UPLOAD_FOLDER, filename)
            img.save(path)

            # Reabre a imagem para converter para RGB (FPDF s√≥ aceita JPEG RGB)
            image = Image.open(path).convert('RGB')

            # Salva temporariamente em JPEG para compatibilidade com FPDF
            image_jpg_path = path.rsplit('.', 1)[0] + ".jpg"
            image.save(image_jpg_path)

            # Adiciona p√°gina no PDF e insere a imagem JPEG
            pdf.add_page()
            pdf.image(image_jpg_path, x=10, y=10, w=190)

        # Gera um nome amig√°vel para o PDF resultante com timestamp
        output_filename = f"convertido_{datetime.now().strftime('%d-%m-%Y_%H-%M-%S')}.pdf"
        output_path = os.path.join(RESULT_FOLDER, output_filename)

        # Salva o PDF final
        pdf.output(output_path)

        flash("‚úÖ Imagens convertidas para PDF com sucesso!")
        return render_template('download_unico.html', filename=output_filename)

    except Exception as e:
        flash(f"‚ùå Erro ao converter JPG para PDF: {str(e)}")
        return redirect('/')

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: OCR PDF ---
@app.route('/ocr_pdf', methods=['POST'])
def ocr_pdf():
    try:
        # Verifica se o arquivo foi enviado no formul√°rio
        if 'pdf' not in request.files:
            flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
            return redirect(request.referrer or url_for('index'))

        file = request.files['pdf']

        # Verifica se o usu√°rio selecionou um arquivo
        if file.filename == '':
            flash("‚ö†Ô∏è Nenhum arquivo selecionado.")
            return redirect(request.referrer or url_for('index'))

        # Verifica se o arquivo tem extens√£o .pdf (simples valida√ß√£o)
        if not file.filename.lower().endswith('.pdf'):
            flash(f"‚ùå O arquivo '{file.filename}' n√£o possui extens√£o .pdf.")
            return redirect(request.referrer or url_for('index'))

        # Garante um nome seguro e salva o arquivo na pasta tempor√°ria
        filename = secure_filename(file.filename)
        input_path = os.path.join(UPLOAD_FOLDER, filename)
        file.save(input_path)

        # Tenta abrir o PDF para verificar se est√° v√°lido e n√£o protegido
        try:
            with open(input_path, 'rb') as f:
                reader = PdfReader(f)
                if reader.is_encrypted:
                    os.remove(input_path)
                    flash("üîí O arquivo PDF est√° protegido por senha.")
                    return redirect(request.referrer or url_for('index'))
        except PdfReadError as e:
            # Trata erro de PDF inv√°lido ou corrompido
            os.remove(input_path)
            flash("‚ùå O arquivo PDF parece estar incompleto ou corrompido.")
            return redirect(request.referrer or url_for('index'))

        # Converte o PDF em imagens para realizar OCR
        imagens = convert_from_path(input_path)

        # Inicializa string para juntar o texto extra√≠do
        texto_extraido = ""
        for img in imagens:
            # Extrai texto de cada p√°gina imagem usando pytesseract
            texto_extraido += pytesseract.image_to_string(img)

        # Define nome de sa√≠da do arquivo texto com timestamp leg√≠vel
        output_filename = f"ocr_{datetime.now().strftime('%d-%m-%Y_%H-%M-%S')}.txt"
        output_path = os.path.join(RESULT_FOLDER, output_filename)

        # Salva o texto extra√≠do em arquivo UTF-8
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(texto_extraido)

        flash("‚úÖ OCR realizado com sucesso! Texto extra√≠do do PDF.")
        return render_template('download_unico.html', filename=output_filename)

    except Exception as e:
        # Em caso de erro, tenta remover arquivo tempor√°rio e mostra mensagem
        if 'input_path' in locals() and os.path.exists(input_path):
            os.remove(input_path)
        flash(f"‚ùå Erro ao realizar OCR: {str(e)}")
        return redirect(request.referrer or url_for('index'))

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: PDF para Word ---
@app.route('/pdf_para_word', methods=['POST'])
def pdf_para_word():
    try:
        # Verifica se o arquivo foi enviado no formul√°rio
        if 'pdf' not in request.files:
            flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
            return redirect(request.referrer or url_for('index'))

        file = request.files['pdf']

        # Verifica se o usu√°rio selecionou algum arquivo
        if file.filename == '':
            flash("‚ö†Ô∏è Nenhum arquivo selecionado.")
            return redirect(request.referrer or url_for('index'))

        # Verifica se o arquivo possui extens√£o .pdf (valida√ß√£o simples)
        if not file.filename.lower().endswith('.pdf'):
            flash(f"‚ùå O arquivo '{file.filename}' n√£o possui extens√£o .pdf.")
            return redirect(request.referrer or url_for('index'))

        # Garante nome seguro e salva arquivo na pasta tempor√°ria
        filename = secure_filename(file.filename)
        input_path = os.path.join(UPLOAD_FOLDER, filename)
        file.save(input_path)

        # Tenta abrir o PDF para garantir que est√° v√°lido e n√£o protegido
        try:
            with open(input_path, 'rb') as f:
                reader = PdfReader(f)
                if reader.is_encrypted:
                    os.remove(input_path)
                    flash("üîí O arquivo PDF est√° protegido por senha.")
                    return redirect(request.referrer or url_for('index'))
        except PdfReadError:
            # PDF inv√°lido, corrompido ou incompleto
            os.remove(input_path)
            flash("‚ùå O arquivo PDF parece estar incompleto ou corrompido.")
            return redirect(request.referrer or url_for('index'))

        # Define nome e caminho do arquivo Word de sa√≠da com timestamp leg√≠vel
        output_filename = f"convertido_{datetime.now().strftime('%d-%m-%Y_%H-%M-%S')}.docx"
        output_path = os.path.join(RESULT_FOLDER, output_filename)

        # Converte o PDF para Word usando pdf2docx
        converter = Converter(input_path)
        converter.convert(output_path, start=0, end=None)
        converter.close()

        # Mensagem de sucesso e renderiza p√°gina para download
        flash("‚úÖ PDF convertido para Word com sucesso!")
        return render_template('download_unico.html', filename=output_filename)

    except Exception as e:
        # Em caso de erro, tenta remover o arquivo tempor√°rio e exibe mensagem
        if 'input_path' in locals() and os.path.exists(input_path):
            os.remove(input_path)
        flash(f"‚ùå Erro ao converter PDF para Word: {str(e)}")
        return redirect(request.referrer or url_for('index'))

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: PDF para Excel ---
@app.route('/pdf_para_excel', methods=['POST'])
def pdf_para_excel():
    try:
        # Verifica se o arquivo foi enviado no formul√°rio
        if 'pdf' not in request.files:
            flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
            return redirect(request.referrer or url_for('index'))

        file = request.files['pdf']

        # Verifica se o usu√°rio selecionou algum arquivo
        if file.filename == '':
            flash("‚ö†Ô∏è Nenhum arquivo selecionado.")
            return redirect(request.referrer or url_for('index'))

        # Verifica se o arquivo possui extens√£o .pdf (valida√ß√£o b√°sica)
        if not file.filename.lower().endswith('.pdf'):
            flash(f"‚ùå O arquivo '{file.filename}' n√£o possui extens√£o .pdf.")
            return redirect(request.referrer or url_for('index'))

        # Garante nome seguro e salva o PDF na pasta tempor√°ria
        filename = secure_filename(file.filename)
        input_path = os.path.join(UPLOAD_FOLDER, filename)
        file.save(input_path)

        # Tenta abrir o PDF para garantir que n√£o est√° protegido nem corrompido
        try:
            with open(input_path, 'rb') as f:
                reader = PdfReader(f)
                if reader.is_encrypted:
                    os.remove(input_path)
                    flash("üîí O arquivo PDF est√° protegido por senha.")
                    return redirect(request.referrer or url_for('index'))
        except PdfReadError:
            # PDF inv√°lido, corrompido ou incompleto
            os.remove(input_path)
            flash("‚ùå O arquivo PDF parece estar incompleto ou corrompido.")
            return redirect(request.referrer or url_for('index'))

        # Define nome do Excel de sa√≠da com timestamp leg√≠vel
        output_filename = f"tabelas_extraidas_{datetime.now().strftime('%d-%m-%Y_%H-%M-%S')}.xlsx"
        output_path = os.path.join(RESULT_FOLDER, output_filename)

        # Extrai tabelas do PDF usando pdfplumber
        todas_tabelas = []
        with pdfplumber.open(input_path) as pdf:
            for pagina in pdf.pages:
                tabelas = pagina.extract_tables()
                for tabela in tabelas:
                    # Cria DataFrame para cada tabela encontrada (pulando cabe√ßalho na primeira linha)
                    df = pd.DataFrame(tabela[1:], columns=tabela[0])
                    todas_tabelas.append(df)

        # Se nenhuma tabela for encontrada, avisa o usu√°rio e retorna
        if not todas_tabelas:
            os.remove(input_path)
            flash("‚ö†Ô∏è Nenhuma tabela foi encontrada no PDF.")
            return redirect(request.referrer or url_for('index'))

        # Salva todas as tabelas extra√≠das em planilhas separadas no arquivo Excel
        with pd.ExcelWriter(output_path) as writer:
            for i, tabela in enumerate(todas_tabelas):
                tabela.to_excel(writer, sheet_name=f"Tabela_{i+1}", index=False)

        # Remove o PDF tempor√°rio
        os.remove(input_path)

        # Mensagem de sucesso e renderiza a p√°gina de download
        flash("‚úÖ PDF convertido para Excel com sucesso!")
        return render_template('download_unico.html', filename=output_filename)

    except Exception as e:
        # Remove o arquivo tempor√°rio em caso de erro
        if 'input_path' in locals() and os.path.exists(input_path):
            os.remove(input_path)
        flash(f"‚ùå Erro ao converter PDF para Excel: {str(e)}")
        return redirect(request.referrer or url_for('index'))

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: PDF para PowerPoint ---
@app.route('/pdf_para_ppt', methods=['POST'])
def pdf_para_ppt():
    try:
        # Verifica se o arquivo foi enviado no formul√°rio
        if 'pdf' not in request.files:
            flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
            return redirect(request.referrer or url_for('index'))

        file = request.files['pdf']

        # Verifica se o usu√°rio selecionou algum arquivo
        if file.filename == '':
            flash("‚ö†Ô∏è Nenhum arquivo selecionado.")
            return redirect(request.referrer or url_for('index'))

        # Verifica se o arquivo possui extens√£o .pdf (valida√ß√£o b√°sica)
        if not file.filename.lower().endswith('.pdf'):
            flash(f"‚ùå O arquivo '{file.filename}' n√£o possui extens√£o .pdf.")
            return redirect(request.referrer or url_for('index'))

        # Garante nome seguro e salva o PDF na pasta tempor√°ria
        filename = secure_filename(file.filename)
        input_path = os.path.join(UPLOAD_FOLDER, filename)
        file.save(input_path)

        # Tenta abrir o PDF para garantir que n√£o est√° protegido nem corrompido
        try:
            with open(input_path, 'rb') as f:
                reader = PdfReader(f)
                if reader.is_encrypted:
                    os.remove(input_path)
                    flash("üîí O arquivo PDF est√° protegido por senha.")
                    return redirect(request.referrer or url_for('index'))
        except PdfReadError:
            # PDF inv√°lido, corrompido ou incompleto
            os.remove(input_path)
            flash("‚ùå O arquivo PDF parece estar incompleto ou corrompido.")
            return redirect(request.referrer or url_for('index'))

        # Define nome do PowerPoint de sa√≠da com timestamp leg√≠vel
        output_filename = f"apresentacao_{datetime.now().strftime('%d-%m-%Y_%H-%M-%S')}.pptx"
        output_path = os.path.join(RESULT_FOLDER, output_filename)

        # Converte cada p√°gina do PDF em uma imagem (usado para inserir no PPT)
        imagens = convert_from_path(input_path)
        prs = Presentation()

        # Define tamanho padr√£o do slide em 16:9 (pode ser ajustado)
        prs.slide_width = Inches(13.33)
        prs.slide_height = Inches(7.5)

        # Para cada imagem gerada do PDF, cria um slide com a imagem ocupando todo o slide
        for img in imagens:
            slide = prs.slides.add_slide(prs.slide_layouts[6])  # layout em branco

            # Gera um caminho tempor√°rio para salvar a imagem JPEG (usa timestamp para evitar conflitos)
            img_path = os.path.join(RESULT_FOLDER, f"slide_temp_{datetime.now().timestamp()}.jpg")
            img.save(img_path, 'JPEG')

            # Adiciona a imagem ao slide, ajustando para preencher o slide inteiro
            slide.shapes.add_picture(img_path, Inches(0), Inches(0), width=prs.slide_width, height=prs.slide_height)

            # Remove a imagem tempor√°ria ap√≥s adicion√°-la para evitar ac√∫mulo (opcional)
            os.remove(img_path)

        # Salva o arquivo PPTX final
        prs.save(output_path)

        # Remove o PDF tempor√°rio ap√≥s a convers√£o
        os.remove(input_path)

        # Mensagem de sucesso e renderiza p√°gina de download
        flash("‚úÖ PDF convertido para PowerPoint com sucesso!")
        return render_template('download_unico.html', filename=output_filename)

    except Exception as e:
        # Remove arquivo tempor√°rio em caso de erro
        if 'input_path' in locals() and os.path.exists(input_path):
            os.remove(input_path)
        flash(f"‚ùå Erro ao converter PDF para PowerPoint: {str(e)}")
        return redirect(request.referrer or url_for('index'))

# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

# --- ROTA: Marca d'√°gua no PDF ---
@app.route('/marca_dagua', methods=['POST'])
def marca_dagua():
    try:
        # Verifica se o arquivo PDF foi enviado pelo formul√°rio
        if 'pdf' not in request.files:
            flash("‚ö†Ô∏è Nenhum arquivo foi enviado.")
            return redirect(request.referrer or url_for('index'))

        file = request.files['pdf']
        texto = request.form.get('texto', '').strip()

        # Valida se o arquivo possui nome e extens√£o .pdf
        if not file or file.filename == '' or not file.filename.lower().endswith('.pdf'):
            flash("‚ùå Envie um arquivo PDF v√°lido.")
            return redirect(request.referrer or url_for('index'))

        # Valida se o texto da marca d'√°gua foi fornecido
        if not texto:
            flash("‚ùå Insira um texto para a marca d'√°gua.")
            return redirect(request.referrer or url_for('index'))

        # Salva o PDF recebido com nome seguro
        filename = secure_filename(file.filename)
        input_path = os.path.join(UPLOAD_FOLDER, filename)
        file.save(input_path)

        # Verifica se o PDF est√° protegido ou corrompido
        try:
            with open(input_path, 'rb') as f:
                reader = PdfReader(f)
                if reader.is_encrypted:
                    os.remove(input_path)
                    flash("üîí O arquivo PDF est√° protegido por senha.")
                    return redirect(request.referrer or url_for('index'))
        except PdfReadError:
            os.remove(input_path)
            flash("‚ùå O arquivo PDF parece estar incompleto ou corrompido.")
            return redirect(request.referrer or url_for('index'))

        # Cria um PDF tempor√°rio para a marca d'√°gua com ReportLab
        watermark_pdf = BytesIO()
        c = canvas.Canvas(watermark_pdf, pagesize=letter)
        c.setFont("Helvetica", 40)
        c.setFillGray(0.5, 0.3)  # Cor cinza transl√∫cida para a marca
        c.saveState()
        c.translate(300, 400)
        c.rotate(45)
        c.drawCentredString(0, 0, texto)
        c.restoreState()
        c.save()
        watermark_pdf.seek(0)

        # L√™ o PDF da marca d'√°gua e o PDF original
        watermark = PdfReader(watermark_pdf)
        reader = PdfReader(input_path)
        writer = PdfWriter()

        watermark_page = watermark.pages[0]

        # Aplica a marca d'√°gua em cada p√°gina do PDF original
        for page in reader.pages:
            page.merge_page(watermark_page)
            writer.add_page(page)

        # Define o nome do arquivo de sa√≠da com timestamp leg√≠vel
        output_filename = f"marcado_{datetime.now().strftime('%d-%m-%Y_%H-%M-%S')}.pdf"
        output_path = os.path.join(RESULT_FOLDER, output_filename)

        # Salva o novo PDF com marca d'√°gua
        with open(output_path, 'wb') as f_out:
            writer.write(f_out)

        # Remove o PDF tempor√°rio de entrada para limpeza
        os.remove(input_path)

        flash("‚úÖ Marca d'√°gua adicionada com sucesso!")
        return render_template('download_unico.html', filename=output_filename)

    except Exception as e:
        # Remove o arquivo tempor√°rio em caso de erro
        if 'input_path' in locals() and os.path.exists(input_path):
            os.remove(input_path)
        flash(f"‚ùå Erro ao adicionar marca d'√°gua: {str(e)}")
        return redirect(request.referrer or url_for('index'))

if __name__ == '__main__':
    app.run(debug=False)

